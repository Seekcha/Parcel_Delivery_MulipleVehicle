#--------------------------------------------------------------
# Course:     Master IA and Robotics                          |
#--------------------------------------------------------------
# Members:     Seekcha Sungkur                                |
#              Munish Dawoonah                                |
#              Ferio Rasambatra                               |
# Course:      Metaheuristics:                                |
#              Evolutionary and Bio-Inspired Algorithms       |
# Assignment:  Solving a Complex Problem using Metaheuristics |
#              [Assignment - 4]                                |
# Title:
# Date:        OCTOBER  25, 2020                              |
#--------------------------------------------------------------

import math
import time
import json
import random
import datetime
from decimal import Decimal

import googlemaps
import collections

# Calling the distance matrix API
gmaps = googlemaps.Client(key='AIzaSyBx0n2ciqzWa6er_BjaDJvXZ6eYr1jKmN0')
print("Maximum number of vehicle = 10")
numVehicles = int(input("VEHICLES NUMBERS : "))


def convert(seconds):
    seconds = seconds % (24 * 3600)
    hour = seconds // 3600
    seconds %= 3600
    minutes = seconds // 60
    seconds %= 60
    return "%d:%02d:%02d" % (hour, minutes, seconds)

# distance_matrix = [[(0, 0), (8473, 624), (15057, 1232), (27494, 1738), (29293, 1898), (27634, 1774), (32329, 2225), (19189, 1263), (20487, 2018), (44296, 3675), (43902, 2435), (3218, 432), (7507, 536), (24334, 1652), (26245, 1898), (134, 22), (400, 89), (616, 134), (597, 115), (1125, 150), (1045, 148), (3010, 365), (2388, 399), (2889, 345), (2656, 285), (2560, 267), (2204, 361), (2747, 303), (1833, 268), (1988, 281), (8112, 1073), (8193, 1101), (8291, 1090), (8273, 1112), (8468, 1138), (8440, 1173), (8576, 1153), (11549, 891), (12642, 847), (13129, 885), (11244, 804), (11944, 879), (11149, 810), (11086, 798), (11320, 844), (25080, 1721), (24801, 1685), (24743, 1629), (24917, 1655), (46824, 3029), (45303, 2969), (47686, 3122), (44917, 3321), (44644, 3266)], [(8698, 600), (0, 0), (22825, 1643), (35262, 2149), (37061, 2309), (35402, 2185), (40097, 2636), (11644, 813), (22073, 1748), (45882, 3405), (36357, 1985), (10724, 866), (2535, 289), (32102, 2063), (34013, 2309), (8564, 580), (9098, 689), (8315, 634), (8934, 564), (7604, 479), (7813, 522), (10778, 776), (10745, 770), (10657, 756), (10424, 696), (10328, 678), (10551, 723), (10515, 714), (10016, 705), (9494, 716), (6323, 682), (6505, 698), (6090, 616), (6425, 687), (6230, 663), (6300, 674), (6160, 694), (4004, 441), (5097, 397), (5584, 435), (3699, 354), (4399, 429), (3604, 360), (3541, 348), (3775, 394), (17535, 1271), (17256, 1235), (17198, 1179), (17372, 1205), (39279, 2579), (37758, 2519), (40141, 2672), (37372, 2871), (37099, 2816)], [(15430, 1432), (22467, 1793), (0, 0), (13297, 1056), (14440, 1154), (22301, 1529), (26996, 1980), (29723, 1812), (35649, 3396), (59458, 5053), (56338, 3172), (14428, 1530), (21501, 1705), (19001, 1407), (20912, 1653), (15296, 1412), (15830, 1521), (15899, 1517), (14700, 1424), (15216, 1392), (15136, 1390), (13393, 1334), (13360, 1328), (13272, 1314), (13039, 1254), (12943, 1236), (13166, 1281), (13130, 1272), (14444, 1414), (14219, 1462), (27863, 2302), (28045, 2318), (27630, 2236), (27965, 2307), (27770, 2283), (27840, 2294), (27700, 2314), (25544, 2061), (31586, 1843), (32073, 1881), (25239, 1974), (25939, 2049), (25144, 1980), (25081, 1968), (25315, 2014), (37516, 2458), (37237, 2422), (37179, 2366), (37353, 2392), (59260, 3766), (57739, 3706), (60122, 3859), (43781, 3501), (44362, 3568)], [(28028, 1847), (35065, 2208), (13344, 1015), (0, 0), (3241, 398), (10456, 869), (18191, 1402), (40251, 2198), (48247, 3811), (72056, 5468), (66866, 3558), (27026, 1945), (34099, 2120), (11427, 821), (11519, 1022), (27894, 1827), (28428, 1936), (28497, 1932), (27298, 1839), (27814, 1807), (27734, 1805), (25991, 1749), (25958, 1743), (25870, 1729), (25637, 1669), (25541, 1651), (25764, 1696), (25728, 1687), (27042, 1829), (26817, 1877), (40461, 2717), (40643, 2733), (40228, 2651), (40563, 2722), (40368, 2698), (40438, 2709), (40298, 2729), (42643, 2276), (42114, 2229), (42601, 2267), (37837, 2389), (42445, 2279), (37742, 2395), (37679, 2383), (35960, 2293), (48044, 2844), (47765, 2808), (47707, 2752), (47881, 2778), (69788, 4152), (68267, 4092), (70650, 4245), (40871, 3230), (41452, 3297)], [(29903, 2024), (36940, 2385), (14395, 1152), (3241, 387), (0, 0), (14903, 1097), (22638, 1630), (42126, 2375), (50122, 3988), (73931, 5645), (68741, 3735), (28901, 2122), (35974, 2297), (13302, 998), (15966, 1250), (29769, 2004), (30303, 2113), (30372, 2109), (29173, 2016), (29689, 1984), (29609, 1982), (27866, 1926), (27833, 1920), (27745, 1906), (27512, 1846), (27416, 1828), (27639, 1873), (27603, 1864), (28917, 2006), (28692, 2054), (46649, 2710), (46831, 2726), (46416, 2644), (46751, 2715), (46556, 2691), (46626, 2702), (46486, 2722), (44518, 2453), (43989, 2406), (44476, 2444), (39712, 2566), (44320, 2456), (37664, 2436), (39554, 2560), (37835, 2470), (49919, 3021), (49640, 2985), (49582, 2929), (49756, 2955), (71663, 4329), (70142, 4269), (72525, 4422), (42746, 3407), (43327, 3474)], [(28080, 1903), (35117, 2264), (22239, 1528), (10374, 868), (14924, 1119), (0, 0), (12808, 925), (40303, 2254), (48299, 3867), (72108, 5524), (66918, 3614), (27078, 2001), (34151, 2176), (4624, 332), (3274, 521), (27946, 1883), (28480, 1992), (28549, 1988), (27350, 1895), (27866, 1863), (27786, 1861), (26043, 1805), (26010, 1799), (25922, 1785), (25689, 1725), (25593, 1707), (25816, 1752), (25780, 1743), (27094, 1885), (26869, 1933), (40513, 2773), (40695, 2789), (44593, 2523), (40615, 2778), (40420, 2754), (40490, 2765), (44663, 2601), (42695, 2332), (42166, 2285), (42653, 2323), (37889, 2445), (42497, 2335), (35841, 2315), (37731, 2439), (36012, 2349), (48096, 2900), (47817, 2864), (47759, 2808), (47933, 2834), (69840, 4208), (68319, 4148), (70702, 4301), (36030, 3051), (36611, 3118)], [(32710, 2306), (39747, 2667), (26869, 1931), (19537, 1442), (21336, 1602), (12817, 917), (0, 0), (38384, 2754), (52929, 4270), (76738, 5927), (64999, 4115), (31708, 2404), (38781, 2579), (8502, 612), (8739, 746), (32576, 2286), (33110, 2395), (33179, 2391), (31980, 2298), (32496, 2266), (32416, 2264), (30673, 2208), (30640, 2202), (30552, 2188), (30319, 2128), (30223, 2110), (30446, 2155), (30410, 2146), (31724, 2288), (31499, 2336), (45143, 3176), (49638, 3008), (44910, 3110), (49558, 2997), (49363, 2973), (45120, 3168), (49293, 3004), (47325, 2735), (46796, 2688), (47283, 2726), (42519, 2848), (47127, 2738), (40471, 2718), (42361, 2842), (42595, 2888), (43937, 3424), (45898, 3365), (45840, 3309), (46014, 3335), (67921, 4709), (66400, 4649), (68783, 4802), (23251, 2132), (23832, 2199)], [(20186, 1298), (12850, 915), (31442, 1978), (41028, 2327), (42827, 2487), (41168, 2363), (37967, 2748), (0, 0), (23019, 1913), (46828, 3570), (26744, 1399), (22212, 1564), (12525, 1097), (37868, 2241), (39779, 2487), (20052, 1278), (20586, 1387), (19803, 1332), (20421, 1261), (19092, 1177), (19301, 1220), (22266, 1474), (22233, 1468), (22145, 1454), (21912, 1394), (21816, 1376), (22039, 1421), (22003, 1412), (21504, 1402), (20982, 1414), (11436, 975), (11618, 991), (11203, 909), (11538, 980), (11343, 956), (11413, 967), (11273, 987), (9305, 718), (8776, 671), (9263, 709), (9210, 712), (9107, 721), (9193, 797), (9378, 858), (9364, 831), (7922, 685), (7643, 649), (7585, 593), (7759, 619), (29666, 1993), (28145, 1933), (30528, 2086), (32884, 2404), (32611, 2349)], [(20415, 1970), (21957, 1752), (35471, 3202), (47908, 3708), (49707, 3868), (48048, 3744), (52743, 4195), (22678, 1814), (0, 0), (31360, 2351), (44449, 2859), (23366, 2360), (23272, 1903), (44748, 3622), (46659, 3868), (20270, 1950), (20453, 2022), (20156, 1964), (21012, 2085), (21273, 2078), (21193, 2076), (23424, 2335), (22536, 2327), (22484, 2348), (23070, 2255), (22974, 2237), (22352, 2289), (22316, 2283), (21980, 2196), (22136, 2209), (16739, 1617), (16441, 1553), (16918, 1635), (16521, 1564), (16717, 1589), (17176, 1595), (16825, 1605), (19239, 1633), (18710, 1586), (19197, 1624), (19144, 1627), (19041, 1636), (22320, 1833), (22258, 1821), (22491, 1867), (21477, 2153), (25348, 2109), (25290, 2053), (25464, 2079), (47371, 3453), (45850, 3393), (48233, 3546), (55318, 4165), (55045, 4110)], [(44197, 3655), (45739, 3437), (59253, 4887), (71690, 5393), (73489, 5553), (71830, 5429), (76525, 5880), (46460, 3499), (31240, 2347), (0, 0), (52843, 4007), (47148, 4045), (47054, 3588), (68530, 5307), (70441, 5553), (44052, 3635), (44235, 3707), (43938, 3649), (44794, 3770), (45055, 3763), (44975, 3761), (47206, 4020), (46318, 4012), (46266, 4033), (46852, 3940), (46756, 3922), (46134, 3974), (46098, 3968), (45762, 3881), (45918, 3894), (40521, 3301), (40223, 3237), (40700, 3319), (40303, 3248), (40499, 3273), (40958, 3279), (40607, 3289), (43021, 3318), (42492, 3271), (42979, 3309), (42926, 3312), (42823, 3321), (46102, 3518), (46040, 3506), (46273, 3552), (40791, 3390), (40912, 3401), (40722, 3352), (40618, 3327), (39352, 3031), (37831, 2971), (40214, 3124), (79100, 5850), (78827, 5795)], [(43984, 2515), (36649, 2132), (58006, 3356), (67592, 3705), (69391, 3865), (67732, 3741), (64531, 4127), (26808, 1432), (44635, 2968), (53001, 4099), (0, 0), (46010, 2781), (37963, 2283), (64432, 3619), (66343, 3865), (43850, 2495), (44384, 2604), (43601, 2549), (44219, 2479), (42890, 2394), (43099, 2437), (46064, 2691), (46031, 2685), (45943, 2671), (45710, 2611), (45614, 2593), (45837, 2638), (45801, 2629), (45302, 2620), (44780, 2631), (36062, 2271), (34969, 2387), (35829, 2205), (34889, 2377), (34694, 2353), (34763, 2363), (34624, 2383), (33931, 2014), (33402, 1967), (33889, 2005), (33836, 2008), (33733, 2017), (37011, 2213), (36949, 2201), (37182, 2247), (24255, 1467), (23976, 1431), (23918, 1375), (24092, 1401), (22008, 1501), (22449, 1619), (22870, 1594), (34841, 2675), (34553, 2645)], [(2822, 424), (10839, 860), (15796, 1439), (28233, 1945), (30032, 2105), (28373, 1981), (33068, 2432), (21555, 1499), (23040, 2388), (46849, 4045), (46268, 2671), (0, 0), (9873, 772), (25073, 1859), (26984, 2105), (2688, 404), (3222, 513), (3291, 509), (3055, 467), (3119, 402), (3039, 401), (1451, 304), (1400, 366), (1535, 332), (1754, 359), (1658, 341), (2032, 365), (1996, 359), (1108, 213), (1512, 245), (10666, 1444), (10747, 1472), (16002, 1303), (10827, 1483), (11022, 1508), (10994, 1543), (11130, 1523), (13916, 1128), (15008, 1083), (15495, 1121), (13611, 1041), (14311, 1116), (13516, 1047), (13453, 1035), (13687, 1081), (27446, 1957), (27167, 1921), (27109, 1865), (27283, 1891), (49190, 3265), (47669, 3205), (50052, 3358), (47284, 3558), (47011, 3503)], [(10190, 692), (2397, 226), (24317, 1735), (36754, 2241), (38553, 2401), (36894, 2277), (41589, 2728), (13113, 865), (23541, 1800), (47350, 3457), (37825, 2037), (12216, 958), (0, 0), (33594, 2155), (35505, 2401), (10056, 672), (10590, 781), (9807, 726), (10426, 656), (9096, 571), (9305, 614), (12270, 868), (12237, 862), (12149, 848), (11916, 788), (11820, 770), (12043, 815), (12007, 806), (11508, 797), (10986, 808), (7792, 734), (7974, 750), (7559, 668), (7894, 739), (7699, 715), (7769, 726), (7629, 746), (5473, 493), (6566, 449), (7053, 487), (5168, 406), (5868, 481), (3337, 322), (3274, 310), (3508, 356), (19003, 1323), (18724, 1287), (18666, 1231), (18840, 1257), (40747, 2631), (39226, 2571), (41609, 2724), (37568, 2952), (37295, 2897)], [(24828, 1759), (31865, 2120), (18987, 1384), (9859, 795), (13334, 1008), (4558, 325), (8583, 627), (37051, 2110), (45047, 3723), (68856, 5380), (63666, 3470), (23826, 1857), (30899, 2032), (0, 0), (1911, 247), (24694, 1739), (25228, 1848), (25297, 1844), (24098, 1751), (24614, 1719), (24534, 1717), (22791, 1661), (22758, 1655), (22670, 1641), (22437, 1581), (22341, 1563), (22564, 1608), (22528, 1599), (23842, 1741), (23617, 1789), (41574, 2445), (41756, 2461), (41341, 2379), (41676, 2450), (41481, 2426), (41551, 2437), (41411, 2457), (39443, 2188), (38914, 2141), (39401, 2179), (34637, 2301), (39245, 2191), (32589, 2171), (34479, 2295), (32760, 2205), (44844, 2756), (44565, 2720), (44507, 2664), (44681, 2690), (66588, 4064), (65067, 4004), (67450, 4157), (31805, 2753), (32386, 2820)], [(26810, 2055), (33847, 2416), (20969, 1680), (11599, 1072), (16149, 1323), (3624, 538), (8757, 803), (39033, 2406), (47029, 4019), (70838, 5676), (65648, 3766), (25808, 2153), (32881, 2328), (1983, 297), (0, 0), (26676, 2035), (27210, 2144), (27279, 2140), (26080, 2047), (26596, 2015), (26516, 2013), (24773, 1957), (24740, 1951), (24652, 1937), (24419, 1877), (24323, 1859), (24546, 1904), (24510, 1895), (25824, 2037), (25599, 2085), (39243, 2925), (39425, 2941), (43323, 2675), (39345, 2930), (39150, 2906), (39220, 2917), (39080, 2937), (36924, 2684), (40896, 2437), (41383, 2475), (36619, 2597), (37319, 2672), (36524, 2603), (36461, 2591), (36695, 2637), (46826, 3052), (46547, 3016), (46489, 2960), (46663, 2986), (68570, 4360), (67049, 4300), (69432, 4453), (31979, 2929), (32560, 2996)], [(134, 18), (8339, 600), (15190, 1249), (27627, 1755), (29426, 1915), (27767, 1791), (32462, 2242), (19055, 1239), (20341, 1983), (44150, 3640), (43768, 2411), (3084, 408), (7373, 512), (24467, 1669), (26378, 1915), (0, 0), (534, 107), (591, 103), (731, 133), (991, 126), (911, 124), (3143, 382), (2254, 375), (2202, 396), (2789, 302), (2693, 284), (2070, 337), (2034, 331), (1699, 244), (1854, 257), (7966, 1039), (8047, 1067), (8145, 1056), (8127, 1077), (8322, 1103), (8295, 1138), (8430, 1118), (11415, 867), (12508, 823), (12995, 861), (11110, 780), (11810, 855), (11015, 786), (10952, 774), (11186, 820), (24946, 1697), (24667, 1661), (24609, 1605), (24783, 1631), (46690, 3005), (45169, 2945), (47552, 3098), (44783, 3297), (44510, 3242)], [(400, 93), (8873, 717), (15212, 1279), (27649, 1785), (29448, 1945), (27789, 1821), (32484, 2272), (19589, 1356), (20503, 2064), (44312, 3721), (44302, 2528), (3618, 525), (7907, 629), (24489, 1699), (26400, 1945), (534, 115), (0, 0), (419, 101), (751, 161), (1525, 243), (1445, 241), (3165, 412), (3132, 406), (3044, 392), (2811, 332), (2715, 314), (2938, 359), (2902, 350), (2233, 361), (2388, 374), (8128, 1120), (8209, 1148), (8307, 1137), (8289, 1159), (8484, 1184), (8456, 1219), (8592, 1199), (11949, 984), (13042, 940), (13529, 978), (11644, 897), (12344, 972), (11549, 903), (11486, 891), (11720, 937), (25480, 1814), (25201, 1778), (25143, 1722), (25317, 1748), (47224, 3122), (45703, 3062), (48086, 3215), (45317, 3414), (45044, 3359)], [(737, 130), (8942, 713), (15590, 1371), (28027, 1877), (29826, 2037), (28167, 1913), (32862, 2364), (19658, 1352), (20228, 2009), (44037, 3666), (44371, 2524), (3687, 521), (7976, 625), (24867, 1791), (26778, 2037), (591, 111), (435, 102), (0, 0), (1144, 252), (1594, 239), (1514, 237), (3543, 504), (2857, 488), (2805, 509), (3189, 424), (3093, 406), (2673, 450), (2637, 444), (2301, 357), (2457, 370), (7853, 1065), (7934, 1093), (8032, 1082), (8014, 1104), (8209, 1129), (8181, 1164), (8317, 1144), (12018, 980), (13111, 936), (13598, 974), (11713, 893), (12413, 968), (11618, 899), (11555, 887), (11789, 933), (25549, 1810), (25270, 1774), (25212, 1718), (25386, 1744), (47293, 3118), (45772, 3058), (48155, 3211), (45386, 3410), (45113, 3355)], [(597, 116), (9760, 650), (14529, 1187), (26966, 1693), (28765, 1853), (27106, 1729), (31801, 2180), (20476, 1289), (21084, 2133), (44893, 3790), (45189, 2461), (2838, 459), (8794, 562), (23806, 1607), (25717, 1853), (731, 137), (808, 161), (1126, 250), (0, 0), (1722, 265), (1642, 263), (2483, 320), (2450, 314), (2362, 300), (2129, 240), (2033, 222), (2256, 267), (2220, 258), (1721, 248), (2090, 330), (8709, 1188), (8790, 1216), (8888, 1205), (8870, 1227), (9065, 1253), (9037, 1288), (9173, 1268), (12837, 918), (13929, 873), (14416, 911), (12532, 831), (13232, 906), (12437, 837), (12374, 825), (12608, 871), (26367, 1747), (26088, 1711), (26030, 1655), (26204, 1681), (48111, 3055), (46590, 2995), (48973, 3148), (46205, 3348), (45932, 3293)], [(1094, 120), (7347, 474), (15273, 1330), (27710, 1836), (29509, 1996), (27850, 1872), (32545, 2323), (18063, 1113), (21313, 2084), (45122, 3741), (42776, 2285), (3119, 387), (6381, 386), (24550, 1750), (26461, 1996), (960, 100), (1494, 209), (1563, 205), (1691, 235), (0, 0), (209, 43), (3227, 464), (2493, 403), (2441, 424), (2592, 436), (2496, 418), (2309, 365), (2273, 359), (1937, 272), (1889, 237), (12742, 982), (9019, 1168), (12509, 916), (9099, 1179), (12649, 963), (12719, 974), (12579, 994), (10423, 741), (11516, 697), (12003, 735), (10118, 654), (10818, 729), (10023, 660), (9960, 648), (10194, 694), (23954, 1571), (23675, 1535), (23617, 1479), (23791, 1505), (45698, 2879), (44177, 2819), (46560, 2972), (43791, 3171), (43518, 3116)], [(1013, 150), (7556, 522), (15192, 1360), (27629, 1866), (29428, 2026), (27769, 1902), (32464, 2353), (18272, 1161), (21232, 2114), (45041, 3771), (42985, 2333), (3039, 417), (6590, 434), (24469, 1780), (26380, 2026), (879, 130), (1413, 239), (1482, 235), (1610, 265), (209, 48), (0, 0), (3146, 494), (2412, 433), (2360, 454), (2511, 466), (2415, 448), (2228, 395), (2192, 389), (1856, 302), (1809, 267), (12951, 1030), (8938, 1198), (12718, 964), (9018, 1209), (12858, 1011), (12928, 1022), (9321, 1250), (10632, 789), (11725, 745), (12212, 783), (10327, 702), (11027, 777), (10232, 708), (10169, 696), (10403, 742), (24163, 1619), (23884, 1583), (23826, 1527), (24000, 1553), (45907, 2927), (44386, 2867), (46769, 3020), (44000, 3219), (43727, 3164)], [(3140, 326), (10177, 688), (13808, 1292), (26245, 1798), (28044, 1958), (26385, 1834), (31080, 2285), (20893, 1326), (23359, 2290), (47168, 3947), (45605, 2498), (1406, 278), (9211, 599), (23085, 1712), (24996, 1958), (3006, 306), (3540, 415), (3609, 411), (2409, 318), (2926, 286), (2846, 284), (0, 0), (390, 73), (335, 57), (303, 55), (207, 37), (430, 82), (394, 73), (922, 166), (1291, 231), (15572, 1196), (15754, 1212), (15339, 1130), (15674, 1201), (15479, 1177), (15549, 1188), (15409, 1208), (13253, 955), (14346, 910), (14833, 948), (12948, 868), (13648, 943), (12853, 874), (12790, 862), (13024, 908), (26783, 1784), (26504, 1748), (26446, 1692), (26620, 1718), (48527, 3092), (47006, 3032), (49389, 3185), (46621, 3385), (46348, 3330)], [(2646, 468), (10876, 878), (14507, 1482), (26944, 1988), (28743, 2148), (27084, 2024), (31779, 2475), (21592, 1516), (22864, 2432), (46673, 4089), (46304, 2688), (1078, 236), (9910, 789), (23784, 1902), (25695, 2148), (2512, 448), (3046, 557), (3115, 553), (2879, 511), (2750, 485), (2670, 484), (699, 190), (0, 0), (465, 129), (464, 170), (906, 227), (591, 196), (555, 188), (932, 257), (981, 304), (16271, 1386), (10571, 1516), (16038, 1320), (10651, 1527), (16178, 1367), (16248, 1378), (10954, 1567), (13952, 1145), (15045, 1100), (15532, 1138), (13647, 1058), (14347, 1133), (13552, 1064), (13489, 1052), (13723, 1098), (27482, 1974), (27203, 1938), (27145, 1882), (27319, 1908), (49226, 3282), (47705, 3222), (50088, 3375), (47320, 3575), (47047, 3520)], [(2246, 329), (10263, 765), (15220, 1344), (27657, 1850), (29456, 2010), (27797, 1886), (32492, 2337), (20979, 1404), (22464, 2293), (46273, 3950), (45692, 2576), (1268, 272), (9297, 677), (24497, 1764), (26408, 2010), (2112, 309), (2646, 418), (2715, 414), (2479, 372), (2350, 346), (2270, 345), (816, 210), (422, 156), (0, 0), (494, 200), (1023, 247), (621, 226), (585, 218), (587, 109), (956, 174), (10090, 1349), (10171, 1377), (15426, 1208), (10251, 1388), (10446, 1413), (10418, 1448), (10554, 1428), (13340, 1033), (14432, 988), (14919, 1026), (13035, 946), (13735, 1021), (12940, 952), (12877, 940), (13111, 986), (26870, 1862), (26591, 1826), (26533, 1770), (26707, 1796), (48614, 3170), (47093, 3110), (49476, 3263), (46708, 3463), (46435, 3408)], [(2470, 363), (10365, 783), (15444, 1378), (27881, 1884), (29680, 2044), (28021, 1920), (32716, 2371), (21081, 1421), (22688, 2327), (46497, 3984), (45793, 2593), (1337, 279), (9399, 694), (24721, 1798), (26632, 2044), (2336, 343), (2870, 452), (2939, 448), (2703, 406), (2574, 380), (2494, 379), (957, 233), (321, 74), (266, 87), (0, 0), (628, 188), (127, 27), (91, 19), (811, 143), (1180, 208), (15760, 1291), (10395, 1411), (15527, 1225), (10475, 1422), (10670, 1447), (15737, 1283), (10778, 1462), (13441, 1050), (14534, 1005), (15021, 1043), (13136, 963), (13836, 1038), (13041, 969), (12978, 957), (13212, 1003), (26971, 1879), (26692, 1843), (26634, 1787), (26808, 1813), (48715, 3187), (47194, 3127), (49577, 3280), (46809, 3480), (46536, 3425)], [(2566, 381), (10247, 739), (15220, 1341), (27657, 1847), (29456, 2007), (27797, 1883), (32492, 2334), (20963, 1377), (22784, 2345), (46593, 4002), (45675, 2549), (1433, 296), (9281, 650), (24497, 1761), (26408, 2007), (2432, 361), (2966, 470), (3035, 466), (2479, 369), (2996, 337), (2916, 335), (675, 158), (417, 91), (329, 78), (96, 18), (0, 0), (223, 45), (187, 36), (907, 161), (1276, 226), (15642, 1247), (10491, 1429), (15409, 1181), (10571, 1440), (15549, 1228), (15619, 1239), (15479, 1259), (13323, 1006), (14416, 961), (14903, 999), (13018, 919), (13718, 994), (12923, 925), (12860, 913), (13094, 959), (26853, 1835), (26574, 1799), (26516, 1743), (26690, 1769), (48597, 3143), (47076, 3083), (49459, 3236), (46691, 3436), (46418, 3381)], [(2375, 381), (10343, 777), (15316, 1379), (27753, 1885), (29552, 2045), (27893, 1921), (32588, 2372), (21059, 1415), (22593, 2345), (46402, 4002), (45771, 2587), (1200, 244), (9377, 688), (24593, 1799), (26504, 2045), (2241, 361), (2775, 470), (2844, 466), (2575, 407), (2479, 398), (2399, 397), (821, 198), (184, 39), (129, 52), (192, 71), (605, 182), (0, 0), (283, 89), (716, 161), (1085, 226), (15738, 1285), (10300, 1429), (15505, 1219), (10380, 1440), (15645, 1266), (15715, 1277), (15575, 1297), (13419, 1044), (14512, 999), (14999, 1037), (13114, 957), (13814, 1032), (13019, 963), (12956, 951), (13190, 997), (26949, 1873), (26670, 1837), (26612, 1781), (26786, 1807), (48693, 3181), (47172, 3121), (49555, 3274), (46787, 3474), (46514, 3419)], [(2379, 345), (10274, 764), (15353, 1360), (27790, 1866), (29589, 2026), (27930, 1902), (32625, 2353), (20990, 1402), (22597, 2309), (46406, 3966), (45702, 2574), (1246, 260), (9308, 675), (24630, 1780), (26541, 2026), (2245, 325), (2779, 434), (2848, 430), (2612, 388), (2483, 362), (2403, 361), (866, 214), (230, 55), (175, 68), (302, 105), (537, 169), (108, 25), (0, 0), (720, 125), (1089, 190), (15669, 1272), (10304, 1393), (15436, 1206), (10384, 1404), (10579, 1429), (15646, 1264), (10687, 1444), (13350, 1031), (14443, 986), (14930, 1024), (13045, 944), (13745, 1019), (12950, 950), (12887, 938), (13121, 984), (26880, 1860), (26601, 1824), (26543, 1768), (26717, 1794), (48624, 3168), (47103, 3108), (49486, 3261), (46718, 3461), (46445, 3406)], [(1780, 249), (9797, 685), (14754, 1264), (27191, 1770), (28990, 1930), (27331, 1806), (32026, 2257), (20513, 1324), (21998, 2213), (45807, 3870), (45226, 2496), (1117, 212), (8831, 597), (24031, 1684), (25942, 1930), (1646, 229), (2180, 338), (2249, 334), (2013, 292), (1884, 266), (1804, 265), (1264, 326), (1174, 228), (1122, 249), (1272, 261), (1176, 243), (990, 190), (954, 184), (0, 0), (373, 88), (9624, 1269), (9705, 1297), (14960, 1128), (9785, 1308), (9980, 1333), (9952, 1368), (10088, 1348), (12874, 953), (13966, 908), (14453, 946), (12569, 866), (13269, 941), (12474, 872), (12411, 860), (12645, 906), (26404, 1782), (26125, 1746), (26067, 1690), (26241, 1716), (48148, 3090), (46627, 3030), (49010, 3183), (46242, 3383), (45969, 3328)], [(1861, 276), (9878, 712), (14835, 1291), (27272, 1797), (29071, 1957), (27412, 1833), (32107, 2284), (20594, 1351), (22079, 2240), (45888, 3897), (45307, 2523), (1162, 233), (8912, 624), (24112, 1711), (26023, 1957), (1727, 256), (2261, 365), (2330, 361), (2094, 319), (1965, 293), (1885, 292), (1310, 345), (1255, 255), (1076, 284), (1353, 288), (1257, 270), (1071, 217), (1035, 211), (82, 27), (0, 0), (9705, 1296), (9786, 1324), (15041, 1155), (9866, 1335), (10061, 1360), (10033, 1395), (10169, 1375), (12955, 980), (14047, 935), (14534, 973), (12650, 893), (13350, 968), (12555, 899), (12492, 887), (12726, 933), (26485, 1809), (26206, 1773), (26148, 1717), (26322, 1743), (48229, 3117), (46708, 3057), (49091, 3210), (46323, 3410), (46050, 3355)], [(8112, 1093), (7374, 618), (28836, 2044), (41273, 2550), (43072, 2710), (41413, 2586), (46108, 3037), (11503, 930), (16785, 1675), (40593, 3332), (36434, 2134), (16736, 1267), (7681, 763), (38113, 2464), (40024, 2710), (7966, 1073), (8150, 1145), (7853, 1087), (14945, 964), (13616, 880), (13825, 923), (16790, 1177), (16757, 1171), (16669, 1157), (16436, 1097), (16340, 1079), (16563, 1124), (16527, 1115), (9677, 1319), (15506, 1117), (0, 0), (918, 214), (233, 53), (998, 225), (1193, 250), (1165, 285), (1301, 265), (3829, 421), (3300, 374), (3277, 448), (3266, 380), (2781, 354), (6729, 693), (6667, 681), (6900, 727), (17612, 1420), (17333, 1384), (17275, 1328), (17449, 1354), (39356, 2728), (37835, 2668), (40218, 2821), (40498, 3204), (40225, 3149)], [(8193, 1050), (7570, 646), (29032, 2072), (41469, 2578), (43268, 2738), (41609, 2614), (46304, 3065), (11699, 958), (16465, 1511), (40273, 3168), (35054, 2232), (11144, 1440), (7877, 791), (38309, 2492), (40220, 2738), (8047, 1030), (8231, 1102), (7934, 1044), (8790, 1165), (13812, 908), (14021, 951), (16986, 1205), (10313, 1407), (16865, 1185), (16632, 1125), (16536, 1107), (10129, 1369), (16723, 1143), (9758, 1276), (9914, 1289), (1036, 162), (0, 0), (582, 140), (80, 11), (275, 36), (247, 71), (383, 51), (4025, 449), (3496, 402), (3150, 468), (3462, 408), (2977, 382), (6925, 721), (6863, 709), (7096, 755), (13992, 1541), (15953, 1482), (15895, 1426), (16069, 1452), (37976, 2826), (36455, 2766), (38838, 2919), (40694, 3232), (40421, 3177)], [(8291, 1037), (7141, 565), (28603, 1991), (41040, 2497), (42839, 2657), (41180, 2533), (45875, 2984), (11270, 877), (16964, 1620), (40772, 3277), (36201, 2081), (16503, 1214), (7448, 710), (37880, 2411), (39791, 2657), (8145, 1017), (8329, 1089), (8032, 1031), (14712, 911), (13383, 827), (13592, 870), (16557, 1124), (16524, 1118), (16436, 1104), (16203, 1044), (16107, 1026), (16330, 1071), (16294, 1062), (9856, 1263), (15273, 1064), (233, 66), (1097, 159), (0, 0), (1177, 170), (1372, 195), (1344, 230), (1480, 210), (3596, 368), (3067, 321), (3044, 395), (3033, 327), (2548, 301), (6496, 640), (6434, 628), (6667, 674), (17379, 1367), (17100, 1331), (17042, 1275), (17216, 1301), (39123, 2675), (37602, 2615), (39985, 2768), (40265, 3151), (39992, 3096)], [(8273, 1060), (7490, 636), (28952, 2062), (41389, 2568), (43188, 2728), (41529, 2604), (46224, 3055), (11619, 948), (16545, 1521), (40353, 3178), (34974, 2221), (11223, 1450), (7797, 781), (38229, 2482), (40140, 2728), (8127, 1041), (8311, 1112), (8014, 1054), (8870, 1175), (13732, 898), (13941, 941), (16906, 1195), (16873, 1189), (16785, 1175), (16552, 1115), (16456, 1097), (10209, 1379), (16643, 1133), (9837, 1287), (9993, 1299), (1116, 172), (80, 10), (662, 150), (0, 0), (195, 26), (167, 61), (303, 41), (3945, 439), (3416, 392), (3070, 457), (3382, 398), (2897, 372), (6845, 711), (6783, 699), (7016, 745), (13912, 1530), (15873, 1471), (15815, 1415), (15989, 1441), (37896, 2815), (36375, 2755), (38758, 2908), (40614, 3222), (40341, 3167)], [(8468, 1084), (7295, 610), (28757, 2036), (41194, 2542), (42993, 2702), (41334, 2578), (46029, 3029), (11424, 922), (16741, 1545), (40549, 3202), (34779, 2196), (11419, 1475), (7602, 755), (38034, 2456), (39945, 2702), (8322, 1065), (8506, 1137), (8209, 1079), (14866, 956), (13537, 872), (13746, 915), (16711, 1169), (16678, 1163), (16590, 1149), (16357, 1089), (16261, 1071), (10404, 1404), (16448, 1107), (10033, 1311), (10189, 1324), (1311, 197), (275, 35), (1096, 177), (195, 24), (0, 0), (70, 10), (108, 15), (3750, 413), (3221, 366), (2875, 432), (3187, 372), (2702, 346), (6650, 685), (6588, 673), (6821, 719), (13717, 1505), (15678, 1446), (15620, 1390), (15794, 1416), (37701, 2790), (36180, 2730), (38563, 2883), (40419, 3196), (40146, 3141)], [(8440, 1091), (7365, 628), (28827, 2054), (41264, 2560), (43063, 2720), (41404, 2596), (46099, 3047), (11494, 940), (16713, 1551), (40521, 3208), (34848, 2213), (11391, 1481), (7672, 773), (38104, 2474), (40015, 2720), (8295, 1071), (8478, 1143), (8181, 1085), (14936, 974), (13607, 890), (13816, 933), (16781, 1187), (16748, 1181), (16660, 1167), (16427, 1107), (16331, 1089), (10377, 1410), (16518, 1125), (10005, 1317), (10161, 1330), (1283, 203), (247, 41), (785, 166), (167, 30), (70, 17), (0, 0), (178, 33), (3820, 431), (3291, 384), (2944, 449), (3257, 390), (2772, 364), (6720, 703), (6658, 691), (6891, 737), (13786, 1522), (15747, 1463), (15689, 1407), (15863, 1433), (37770, 2807), (36249, 2747), (38632, 2900), (40489, 3214), (40216, 3159)], [(8576, 1169), (7225, 625), (28687, 2051), (41124, 2557), (42923, 2717), (41264, 2593), (45959, 3044), (11354, 937), (16849, 1629), (40657, 3286), (34709, 2210), (16587, 1274), (7532, 770), (37964, 2471), (39875, 2717), (8430, 1149), (8614, 1221), (8317, 1163), (14796, 971), (13467, 887), (13676, 930), (16641, 1184), (16608, 1178), (16520, 1164), (16287, 1104), (16191, 1086), (16414, 1131), (16378, 1122), (10141, 1395), (15357, 1124), (1259, 258), (383, 119), (1026, 192), (303, 109), (108, 84), (178, 95), (0, 0), (3680, 428), (3151, 381), (2805, 446), (3117, 387), (2632, 361), (6580, 700), (6518, 688), (6751, 734), (13647, 1519), (15608, 1460), (15550, 1404), (15724, 1430), (37631, 2804), (36110, 2744), (38493, 2897), (40349, 3211), (40076, 3156)], [(12167, 753), (4831, 370), (26293, 1796), (38730, 2302), (40529, 2462), (38870, 2338), (43565, 2789), (8960, 682), (19607, 1649), (43416, 3306), (33891, 1886), (14193, 1019), (6146, 521), (35570, 2216), (37481, 2462), (12033, 733), (12567, 842), (11784, 787), (12402, 716), (11073, 632), (11282, 675), (14247, 929), (14214, 923), (14126, 909), (13893, 849), (13797, 831), (14020, 876), (13984, 867), (13485, 857), (12963, 869), (3559, 446), (3741, 462), (3326, 380), (3661, 451), (3466, 427), (3536, 438), (3396, 458), (0, 0), (899, 142), (1386, 180), (966, 158), (1230, 192), (5194, 451), (5132, 439), (5365, 485), (15069, 1172), (14790, 1136), (14732, 1080), (14906, 1106), (36813, 2480), (35292, 2420), (37675, 2573), (41600, 3033), (41327, 2978)], [(12654, 836), (5318, 453), (26780, 1879), (39217, 2385), (41016, 2545), (39357, 2421), (44052, 2872), (9447, 765), (20094, 1732), (43903, 3389), (34378, 1969), (14680, 1102), (5656, 574), (36057, 2299), (37968, 2545), (12520, 816), (13054, 925), (12271, 870), (12889, 799), (11560, 715), (11769, 758), (14734, 1012), (14701, 1006), (14613, 992), (14380, 932), (14284, 914), (14507, 959), (14471, 950), (13972, 940), (13450, 952), (3685, 499), (3867, 515), (3452, 433), (3787, 504), (3592, 480), (3662, 491), (3522, 511), (955, 182), (0, 0), (1882, 252), (852, 140), (531, 121), (4704, 504), (4642, 492), (4875, 538), (15556, 1255), (15277, 1219), (15219, 1163), (15393, 1189), (37300, 2563), (35779, 2503), (38162, 2656), (38473, 3015), (38200, 2960)], [(12715, 853), (5379, 470), (26841, 1896), (39278, 2402), (41077, 2562), (39418, 2438), (44113, 2889), (9508, 782), (20155, 1749), (43964, 3406), (34439, 1986), (14741, 1119), (6101, 596), (36118, 2316), (38029, 2562), (12581, 833), (13115, 942), (12332, 887), (12950, 816), (11621, 732), (11830, 775), (14795, 1029), (14762, 1023), (14674, 1009), (14441, 949), (14345, 931), (14568, 976), (14532, 967), (14033, 957), (13511, 969), (2847, 412), (3029, 428), (2614, 346), (2949, 417), (2754, 393), (2824, 404), (2684, 424), (1834, 273), (1305, 226), (0, 0), (1686, 213), (1200, 187), (5149, 526), (5087, 514), (5320, 560), (15617, 1272), (15338, 1236), (15280, 1180), (15454, 1206), (37361, 2580), (35840, 2520), (38223, 2673), (38918, 3037), (38645, 2982)], [(11287, 767), (3951, 384), (25413, 1810), (37850, 2316), (39649, 2476), (37990, 2352), (42685, 2803), (9145, 703), (19792, 1670), (43601, 3327), (34076, 1907), (13313, 1033), (5251, 498), (34690, 2230), (36601, 2476), (11153, 747), (11687, 856), (10904, 801), (11522, 731), (10193, 646), (10402, 689), (13367, 943), (13334, 937), (13246, 923), (13013, 863), (12917, 845), (13140, 890), (13104, 881), (12605, 872), (12083, 883), (3280, 423), (3462, 439), (3047, 357), (3382, 428), (3187, 404), (3257, 415), (3117, 435), (915, 130), (959, 162), (1852, 264), (0, 0), (893, 158), (4299, 428), (4237, 416), (4470, 462), (15254, 1193), (14975, 1157), (14917, 1101), (15091, 1127), (36998, 2501), (35477, 2441), (37860, 2594), (38068, 2939), (37795, 2884)], [(12326, 777), (4990, 394), (26452, 1820), (38889, 2326), (40688, 2486), (39029, 2362), (43724, 2813), (9119, 706), (19766, 1673), (43575, 3330), (34050, 1910), (14352, 1043), (5662, 578), (35729, 2240), (37640, 2486), (12192, 757), (12726, 866), (11943, 811), (12561, 740), (11232, 656), (11441, 699), (14406, 953), (14373, 947), (14285, 933), (14052, 873), (13956, 855), (14179, 900), (14143, 891), (13644, 881), (13122, 893), (3691, 503), (3873, 519), (3458, 437), (3793, 508), (3598, 484), (3668, 495), (3528, 515), (1445, 197), (554, 131), (1545, 205), (858, 144), (0, 0), (4710, 508), (4648, 496), (4881, 542), (15228, 1196), (14949, 1160), (14891, 1104), (15065, 1130), (36972, 2504), (35451, 2444), (37834, 2597), (38479, 3019), (38206, 2964)], [(11449, 771), (3425, 375), (25575, 1814), (38012, 2320), (39811, 2480), (38152, 2356), (42847, 2807), (9130, 747), (22552, 1816), (46361, 3473), (36836, 2053), (13475, 1037), (3364, 314), (34852, 2234), (36763, 2480), (11315, 751), (11849, 860), (11066, 805), (11684, 735), (10355, 650), (10564, 693), (13529, 947), (13496, 941), (13408, 927), (13175, 867), (13079, 849), (13302, 894), (13266, 885), (12767, 876), (12245, 887), (6746, 706), (6928, 722), (6513, 640), (6848, 711), (6653, 687), (6723, 698), (6583, 718), (4427, 465), (4690, 490), (5318, 547), (4122, 378), (4822, 453), (0, 0), (216, 74), (172, 34), (18014, 1339), (17735, 1303), (17677, 1247), (17851, 1273), (39758, 2647), (38237, 2587), (40620, 2740), (34263, 2643), (33990, 2588)], [(11386, 833), (3363, 437), (25512, 1876), (37949, 2382), (39748, 2542), (38089, 2418), (42784, 2869), (9315, 795), (22489, 1878), (46298, 3535), (36773, 2115), (13412, 1099), (3302, 376), (34789, 2296), (36700, 2542), (11252, 813), (11786, 922), (11003, 867), (11621, 797), (10292, 712), (10501, 755), (13466, 1009), (13433, 1003), (13345, 989), (13112, 929), (13016, 911), (13239, 956), (13203, 947), (12704, 938), (12182, 949), (6683, 768), (6865, 784), (6450, 702), (6785, 773), (6590, 749), (6660, 760), (6520, 780), (4364, 527), (4627, 552), (5255, 609), (4059, 440), (4759, 515), (216, 61), (0, 0), (387, 95), (17951, 1401), (17672, 1365), (17614, 1309), (17788, 1335), (39695, 2709), (38174, 2649), (40557, 2802), (34448, 2691), (34175, 2636)], [(11620, 807), (3596, 411), (25746, 1850), (38183, 2356), (39982, 2516), (38323, 2392), (43018, 2843), (9301, 783), (22723, 1852), (46532, 3509), (37007, 2089), (13646, 1073), (3535, 350), (35023, 2270), (36934, 2516), (11486, 787), (12020, 896), (11237, 841), (11855, 771), (10526, 686), (10735, 729), (13700, 983), (13667, 977), (13579, 963), (13346, 903), (13250, 885), (13473, 930), (13437, 921), (12938, 912), (12416, 923), (6917, 742), (7099, 758), (6684, 676), (7019, 747), (6824, 723), (6894, 734), (6754, 754), (4598, 501), (4861, 526), (5489, 583), (4293, 414), (4993, 489), (172, 36), (387, 110), (0, 0), (18185, 1375), (17906, 1339), (17848, 1283), (18022, 1309), (39929, 2683), (38408, 2623), (40791, 2776), (34434, 2679), (34161, 2624)], [(21790, 1723), (14454, 1340), (35916, 2766), (46622, 2988), (48421, 3148), (46762, 3024), (43561, 3410), (5838, 715), (20003, 2011), (40598, 3449), (25088, 1558), (23816, 1989), (15769, 1491), (43462, 2902), (45373, 3148), (21656, 1703), (22190, 1812), (21406, 1757), (22025, 1687), (20696, 1602), (20905, 1645), (23870, 1899), (23837, 1893), (23749, 1879), (23516, 1819), (23420, 1801), (23643, 1846), (23607, 1837), (23107, 1828), (22586, 1839), (13867, 1478), (14049, 1494), (13634, 1412), (13969, 1483), (12575, 1559), (13844, 1470), (12505, 1589), (11736, 1221), (11207, 1174), (11694, 1212), (11641, 1215), (11538, 1224), (14817, 1421), (14755, 1409), (14988, 1455), (0, 0), (1098, 225), (1348, 274), (914, 165), (28010, 2152), (26489, 2092), (28872, 2245), (38478, 3066), (38205, 3011)], [(24804, 1707), (17469, 1324), (38826, 2548), (48412, 2897), (50211, 3057), (48552, 2933), (45351, 3319), (7628, 624), (25455, 2160), (40953, 3470), (24126, 1395), (26830, 1973), (18783, 1475), (45252, 2811), (47163, 3057), (24670, 1687), (25204, 1796), (24421, 1741), (25039, 1671), (23710, 1586), (23919, 1629), (26884, 1883), (26851, 1877), (26763, 1863), (26530, 1803), (26434, 1785), (26657, 1830), (26621, 1821), (26122, 1812), (25600, 1823), (16882, 1463), (17064, 1479), (16649, 1397), (16984, 1468), (16789, 1444), (16859, 1455), (16719, 1475), (14751, 1206), (14222, 1159), (14709, 1197), (14656, 1200), (14553, 1209), (17831, 1405), (17769, 1393), (18002, 1439), (400, 123), (0, 0), (373, 90), (335, 70), (27048, 1989), (25527, 1929), (27910, 2082), (40268, 2975), (39995, 2920)], [(24613, 1667), (17278, 1284), (38635, 2508), (48221, 2857), (50020, 3017), (48361, 2893), (45160, 3279), (7437, 584), (25264, 2120), (40763, 3430), (23935, 1355), (26639, 1933), (18592, 1435), (45061, 2771), (46972, 3017), (24479, 1647), (25013, 1756), (24230, 1701), (24848, 1631), (23519, 1546), (23728, 1589), (26693, 1843), (26660, 1837), (26572, 1823), (26339, 1763), (26243, 1745), (26466, 1790), (26430, 1781), (25931, 1772), (25409, 1783), (16691, 1423), (16873, 1439), (16458, 1357), (16793, 1428), (16598, 1404), (16668, 1415), (16528, 1435), (14560, 1166), (14031, 1119), (14518, 1157), (14465, 1160), (14362, 1169), (17640, 1365), (17578, 1353), (17811, 1399), (651, 219), (373, 183), (0, 0), (488, 153), (26857, 1949), (25336, 1889), (27719, 2042), (40077, 2935), (39804, 2880)], [(24919, 1714), (17584, 1331), (38941, 2555), (48527, 2904), (50326, 3064), (48667, 2940), (45466, 3326), (7743, 631), (25570, 2167), (40688, 3424), (24241, 1402), (26945, 1980), (18898, 1482), (45367, 2818), (47278, 3064), (24785, 1694), (25319, 1803), (24536, 1748), (25154, 1678), (23825, 1593), (24034, 1636), (26999, 1890), (26966, 1884), (26878, 1870), (26645, 1810), (26549, 1792), (26772, 1837), (26736, 1828), (26237, 1819), (25715, 1830), (16997, 1470), (17179, 1486), (16764, 1404), (17099, 1475), (16904, 1451), (16974, 1462), (16834, 1482), (14866, 1213), (14337, 1166), (14824, 1204), (14771, 1207), (14668, 1216), (17946, 1412), (17884, 1400), (18117, 1446), (613, 135), (335, 99), (488, 97), (0, 0), (27163, 1996), (25642, 1936), (28025, 2089), (40383, 2982), (40110, 2927)], [(46917, 3049), (39582, 2666), (60939, 3890), (70525, 4239), (72324, 4399), (70665, 4275), (67464, 4661), (29741, 1966), (47568, 3502), (38799, 2905), (22113, 1490), (48943, 3315), (40896, 2817), (67365, 4153), (69276, 4399), (46783, 3029), (47317, 3138), (46534, 3083), (47152, 3013), (45823, 2928), (46032, 2971), (48997, 3225), (48964, 3219), (48876, 3205), (48643, 3145), (48547, 3127), (48770, 3172), (48734, 3163), (48235, 3154), (47713, 3165), (38995, 2805), (39177, 2821), (38762, 2739), (39097, 2810), (38902, 2786), (38972, 2797), (38832, 2817), (36864, 2548), (36335, 2501), (36822, 2539), (36769, 2542), (36666, 2551), (38690, 2709), (39882, 2735), (38861, 2743), (27188, 2001), (26909, 1965), (26851, 1909), (27025, 1935), (0, 0), (1235, 243), (863, 93), (55155, 3880), (54867, 3850)], [(44946, 2918), (37611, 2535), (58968, 3759), (68554, 4108), (70353, 4268), (68694, 4144), (65493, 4530), (27770, 1835), (45597, 3371), (36828, 2774), (24196, 1699), (46972, 3184), (38925, 2686), (65394, 4022), (67305, 4268), (44812, 2898), (45346, 3007), (44563, 2952), (45181, 2882), (43852, 2797), (44061, 2840), (47026, 3094), (46993, 3088), (46905, 3074), (46672, 3014), (46576, 2996), (46799, 3041), (46763, 3032), (46264, 3023), (45742, 3034), (37024, 2674), (37206, 2690), (36791, 2608), (37126, 2679), (36931, 2655), (37001, 2666), (36861, 2686), (34893, 2417), (34364, 2370), (34851, 2408), (34798, 2411), (34695, 2420), (36719, 2578), (37911, 2604), (36890, 2612), (25217, 1870), (24938, 1834), (24880, 1778), (25054, 1804), (1235, 226), (0, 0), (1146, 275), (57238, 4089), (56950, 4059)], [(45707, 3127), (38372, 2744), (59729, 3968), (69315, 4317), (71114, 4477), (69455, 4353), (66254, 4739), (28531, 2044), (46358, 3580), (37589, 2983), (23025, 1618), (47733, 3393), (39686, 2895), (66155, 4231), (68066, 4477), (45573, 3107), (46107, 3216), (45324, 3161), (45942, 3091), (44613, 3006), (44822, 3049), (47787, 3303), (47754, 3297), (47666, 3283), (47433, 3223), (47337, 3205), (47560, 3250), (47524, 3241), (47025, 3232), (46503, 3243), (37785, 2883), (37967, 2899), (37552, 2817), (37887, 2888), (37692, 2864), (37762, 2875), (37622, 2895), (35654, 2626), (35125, 2579), (35612, 2617), (35559, 2620), (35456, 2629), (37480, 2787), (38672, 2813), (37651, 2821), (25978, 2079), (25699, 2043), (25641, 1987), (25815, 2013), (913, 128), (1196, 242), (0, 0), (56067, 4008), (55779, 3978)], [(45233, 3205), (37897, 2822), (41615, 3392), (38868, 3161), (40667, 3321), (36052, 2954), (23265, 2047), (32706, 2322), (55596, 4197), (79405, 5854), (34964, 2639), (47259, 3471), (37769, 2899), (31737, 2649), (31974, 2783), (45099, 3185), (45633, 3294), (44850, 3239), (45468, 3169), (44139, 3084), (44348, 3127), (47313, 3381), (47280, 3375), (47192, 3361), (46959, 3301), (46863, 3283), (47086, 3328), (47050, 3319), (46551, 3310), (46029, 3321), (40530, 3140), (40712, 3156), (40297, 3074), (40632, 3145), (40437, 3121), (40507, 3132), (40367, 3152), (38211, 2899), (38867, 2853), (39354, 2891), (37906, 2812), (38606, 2887), (34437, 2599), (34622, 2660), (34608, 2633), (40499, 2969), (40220, 2933), (40162, 2877), (40336, 2903), (55422, 3881), (55863, 3999), (56284, 3974), (0, 0), (581, 67)], [(44982, 3163), (37646, 2780), (42196, 3466), (39449, 3235), (41248, 3395), (36633, 3029), (23846, 2122), (32455, 2280), (55345, 4155), (79154, 5812), (34676, 2623), (47008, 3429), (37518, 2857), (32318, 2724), (32555, 2858), (44848, 3143), (45382, 3252), (44599, 3197), (45217, 3127), (43888, 3042), (44097, 3085), (47062, 3339), (47029, 3333), (46941, 3319), (46708, 3259), (46612, 3241), (46835, 3286), (46799, 3277), (46300, 3268), (45778, 3279), (40279, 3098), (40461, 3114), (40046, 3032), (40381, 3103), (40186, 3079), (40256, 3090), (40116, 3110), (37960, 2857), (38616, 2811), (39103, 2849), (37655, 2770), (38355, 2845), (34186, 2557), (34371, 2618), (34357, 2591), (40248, 2927), (39969, 2891), (39911, 2835), (40085, 2861), (55134, 3865), (55575, 3983), (55996, 3958), (581, 75), (0, 0)]]

# function using the data in the API
def get_distance_between_coords(origin, destination):
    # getting the current datetime
    now = datetime.datetime.now()

    # calling the function of the API
    ans = gmaps.directions(origin, destination, mode="driving", departure_time=now)

    # loading the data in a JSON file
    jsn = json.loads(json.dumps(ans))
    # returning the specific data found in Json > legs > distance > value
    # return distance and time
    return jsn[0]['legs'][0]['distance']['value'], jsn[0]['legs'][0]['duration']['value']

# Loading JSON file
locs = None
with open('data50.json') as json_file:
    locs = json.load(json_file)

n = len(locs['locations'])
# From dry cleaning services to the first delivery place
distance_matrix = [[0] * n for i in range(n)]

# "Dry Cleaning Services, Destination"

# #i is the value of the start destination
# #j is the value of the end destination

for i in range(0, len(locs['locations'])):
    for j in range(0, len(locs['locations'])):
        # adding Json data obtained in get_distance_between_coords in distance_matrix
        distance_matrix[i][j] = get_distance_between_coords(locs['locations'][i]['coords'],
                                                            locs['locations'][j]['coords'])

print(distance_matrix)
# -------------------------------------------------------------------------------------
################################# SimulatedAnneling ##################################
# -------------------------------------------------------------------------------------

time1 = time.localtime()  # get struct_time
hour1 = time.strftime("%H:%M:%S", time1)
h1 = int(time.localtime().tm_hour)  # get hour
mn1 = int(time.localtime().tm_min)  # get minute
s1 = int(time.localtime().tm_sec)  # get second
duration1 = int((h1 * 3600) + (mn1 * 60) + s1)  # convert to seconds


def convert(seconds):
    seconds = seconds % (24 * 3600)
    hour = seconds // 3600
    seconds %= 3600
    minutes = seconds // 60
    seconds %= 60
    return "%d:%02d:%02d" % (hour, minutes, seconds)

def simulatedAnnealing(Nitems, maxDuration, maxSteps, T, numVehicles):
    simAneal_list = [i for i in range(len(Nitems))]  # indexes of locations available to select randomly

    # returns random neighbour
    def getRandomNeighbour(n):
        index = random.randint(0, n - 1)
        return index

    # Get new neighbours from list of locations not used yet
    def randomize_new_neighbours(neighboursPerSteps):
        ans = []
        n = neighboursPerSteps
        if len(simAneal_list) < neighboursPerSteps: n = len(simAneal_list)
        for i in range(n):
            ans.append(simAneal_list[getRandomNeighbour(n)])
        return ans

    # defining the conditional probability
    def conditionalProbability(cst, newCst, temp):
        if newCst > cst:
            e = 1
        else:
            e = math.exp(- (abs(newCst - cst)) / temp)
        return e

    # User defined metric to evaluate neighbour
    def cost_function(current_loc, next_loc):
        try:
            distance_increment = Nitems[current_loc][next_loc][0]
            duration_increment = Nitems[current_loc][next_loc][1]
            return (distance_increment / duration_increment), next_loc
        except:
            return 0, next_loc

    # Evaluate best neighbour from random choices
    def calculate_cost_functions(current_loc, new_neighbours):
        ans = []
        for i in range(len(new_neighbours)):
            ans.append(cost_function(current_loc, new_neighbours[i]))
        return ans

    def get_best_neighbour(current_loc):
        random_neighbour_values = calculate_cost_functions(current_loc, randomize_new_neighbours(2))

        # get index of best neighbour from random choices made
        if len(random_neighbour_values) != 0:
            best_neighbour_index = random_neighbour_values.index(max(random_neighbour_values))
        # returns global location index of best neighbour
        return random_neighbour_values[best_neighbour_index][1]

    def get_best_neighbours(current_loc):
        ans = []
        for i in range(maxSteps):
            ans.append(get_best_neighbour(current_loc))
        return ans

    def mode_filter(neighbour_indexes):
        data = collections.Counter(neighbour_indexes)
        return data.most_common(1)[0][0]  # returns item'[0]' with frequency of occurence'[1]'

    # #Code for Simulated annealing

    # getting first change and value
    n = 0
    route = [[] for i in range(numVehicles)]
    route_distance = [0] * numVehicles
    route_duration = [0] * numVehicles
    current_loc_index = [0] * numVehicles
    return_distance = [0] * numVehicles
    return_duration = [0] * numVehicles
    previous_return_distance = [0] * numVehicles
    previous_return_duration = [0] * numVehicles
    # adding current distance to Route
    for v in range(numVehicles):
        route[v].append(current_loc_index[v])

    # remove current distance to SimAneal_list
    simAneal_list.remove(current_loc_index[0])

    # The number of times the experiment repeats
    for i in range(len(simAneal_list)):
        for v in range(numVehicles):
            best_neighbour_index = mode_filter(get_best_neighbours(current_loc_index[v]))
            best_neighbour_distance = Nitems[current_loc_index[v]][best_neighbour_index][0]
            best_neighbour_duration = Nitems[current_loc_index[v]][best_neighbour_index][1]

            return_distance[v] = Nitems[0][best_neighbour_index][0]
            return_duration[v] = Nitems[0][best_neighbour_index][1]

            m = best_neighbour_duration + return_duration[v] - previous_return_duration[v]

            # Duration not exceed the maximum duration
            if (route_duration[v] + m) < maxDuration:
                currentChange = abs(best_neighbour_duration - previous_return_distance[v])

                if conditionalProbability(n, currentChange, T) > random.random():
                    route_distance[v] += (
                            best_neighbour_distance + return_distance[v] - previous_return_distance[v])
                    route_duration[v] += (
                            best_neighbour_duration + return_duration[v] - previous_return_duration[v])

                    previous_return_distance[v] = return_distance[v]
                    previous_return_duration[v] = return_duration[v]

                    current_loc_index[v] = best_neighbour_index
                    route[v].append(current_loc_index[v])
                    simAneal_list.remove(current_loc_index[v])  # remove location from tabulist
                    n += 1 / currentChange

            T *= (1 - (T / maxSteps))

    for v in range(numVehicles):
        route[v].append(0)
    return route, route_distance, route_duration


# getting time for the Simulated Annealing algorithm to run
# getting time for the simulatedAnnealing Search algorithm to run
time2 = time.localtime()  # get struct_time
hour2 = time.strftime("%H:%M:%S", time2)
h2 = int(time.localtime().tm_hour)  # get hours
mn2 = int(time.localtime().tm_min)  # get minutes
s2 = int(time.localtime().tm_sec)  # get seconds
duration2 = int((h2 * 3600) + (mn2 * 60) + s2)  # convert to seconds
duration = duration2 - duration1
elapsed = convert(duration)
print("PROCESSING TIMES :")
print(" |>Begin at =", hour1)
print(" |>End at = ", hour2)
# print(" |>Time for Simulated Annealing algorithm to run = ", elapsed)




# ---------------------------------------------------------------------------------
################################# TABU ##################################
# ---------------------------------------------------------------------------------

time1 = time.localtime()  # get struct_time
hour1 = time.strftime("%H:%M:%S", time1)
h1 = int(time.localtime().tm_hour)  # get hour
mn1 = int(time.localtime().tm_min)  # get minute
s1 = int(time.localtime().tm_sec)  # get second
duration1 = int((h1 * 3600) + (mn1 * 60) + s1)  # convert to seconds


def tabuSearch(items, maxDuration, maxSteps, neighboursPerSteps, numVehicles):
    tabu_list = [i for i in range(len(items))]  # indexes of locations available to select randomly

    # Random number generator
    def get_random_neighbour_index(n):
        index = random.randint(0, n - 1)
        return index

    # Get new neighbours from list of locations not used yet
    def randomize_new_neighbours(neighboursPerSteps):
        ans = []
        n = neighboursPerSteps
        if len(tabu_list) < neighboursPerSteps: n = len(tabu_list)
        for i in range(n):
            ans.append(tabu_list[get_random_neighbour_index(n)])
        return ans

    # User defined metric to evaluate neighbour
    def cost_function(current_loc, next_loc):
        try:
            distance_increment = items[current_loc][next_loc][0]
            duration_increment = items[current_loc][next_loc][1]
            return (distance_increment / duration_increment), next_loc
        except:
            return 0, next_loc

    # Evaluate best neighbour from random choices
    def calculate_cost_functions(current_loc, new_neighbours):
        ans = []
        for i in range(len(new_neighbours)):
            ans.append(cost_function(current_loc, new_neighbours[i]))

        return ans

    def get_best_neighbour(current_loc):

        random_neighbour_values = calculate_cost_functions(current_loc,
                                                           randomize_new_neighbours(neighboursPerSteps))

        # get index of best neighbour from random choices made
        if len(random_neighbour_values) != 0:
            best_neighbour_index = random_neighbour_values.index(max(random_neighbour_values))
            # returns global location index of best neighbour
            return random_neighbour_values[best_neighbour_index][1]

    def get_best_neighbours(current_loc):
        ans = []
        for i in range(maxSteps):
            ans.append(get_best_neighbour(current_loc))
        return ans

    def mode_filter(neighbour_indexes):
        data = collections.Counter(neighbour_indexes)
        return data.most_common(1)[0][0]  # returns item'[0]' with frequency of occurence'[1]'

    # Initial setup
    n = 0

    route = [[] for i in range(numVehicles)]
    route_distance = [0] * numVehicles
    route_duration = [0] * numVehicles
    current_loc_index = [0] * numVehicles
    return_distance = [0] * numVehicles
    return_duration = [0] * numVehicles
    previous_return_distance = [0] * numVehicles
    previous_return_duration = [0] * numVehicles

    tabu_list.remove(current_loc_index[0])
    for v in range(numVehicles):
        route[v].append(current_loc_index[v])

    for i in range(len(tabu_list)):
        for v in range(numVehicles):
            best_neighbour_index = mode_filter(get_best_neighbours(current_loc_index[v]))
            best_neighbour_distance = items[current_loc_index[v]][best_neighbour_index][0]
            best_neighbour_duration = items[current_loc_index[v]][best_neighbour_index][1]

            return_distance[v] = items[0][best_neighbour_index][0]
            return_duration[v] = items[0][best_neighbour_index][1]
            m = best_neighbour_duration + return_duration[v] - previous_return_duration[v]

            if (route_duration[v] + m) < maxDuration:
                route_distance[v] += (best_neighbour_distance + return_distance[v] - previous_return_distance[v])
                route_duration[v] += (best_neighbour_duration + return_duration[v] - previous_return_duration[v])

                previous_return_distance[v] = return_distance[v]
                previous_return_duration[v] = return_duration[v]

                current_loc_index[v] = best_neighbour_index
                route[v].append(current_loc_index[v])
                tabu_list.remove(current_loc_index[v])  # remove location from tabulist
                n += 1

    for v in range(numVehicles):
        route[v].append(0)
    return route, route_distance, route_duration

# getting time for the Tabu Search algorithm to run

# getting time for the simulatedAnnealing Search algorithm to run
time2 = time.localtime()  # get struct_time
hour2 = time.strftime("%H:%M:%S", time2)
h2 = int(time.localtime().tm_hour)  # get hours
mn2 = int(time.localtime().tm_min)  # get minutes
s2 = int(time.localtime().tm_sec)  # get seconds
duration2 = int((h2 * 3600) + (mn2 * 60) + s2)  # convert to seconds
duration = duration2 - duration1
elapsed = convert(duration)

print("PROCESSING TIMES :")
print(" |>Begin at  = ", hour1)
print(" |>End at    = ", hour2)
# print(" |>Time for Tabu Search algorithm to run = ", elapsed)



print("-----------------------------------------------------------------------------")
print("-----------------------------------------------------------------------------")
print("TABU SEARCH")
print("....")
start1 = time.time()
st1 = Decimal(start1)
ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
end1 = time.time()
en1 = Decimal(end1)
TS = end1 - start1
for v in range(numVehicles):
    print("\nVEHICLE %d :" % (v + 1))
    print(" |>Optimal route = ", end="")
    for i in range(len(ans1[0][v]) - 1):
        print(locs['locations'][ans1[0][v][i]]['name'], end="")
        print(' ---> ', end="")
    print(locs['locations'][ans1[0][v][0]]['name'])
    km = float(ans1[1][v] / 1000)
    print(" |>Total route distance = ", km, "kilometers")
    print(" |>Total route duration = ", convert(ans1[2][v]), "\n")
print("-----------------------------------------------------------------------------")
print("-----------------------------------------------------------------------------")
print("SIMULATED ANNEALING")
print("....")
start = time.time()
st = Decimal(start)
ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
end = time.time()
en = Decimal(end)
SA = en - st

for v in range(numVehicles):
    print("\nVEHICLE %d :" % (v + 1))
    print(" |>Optimal route = ", end="")
    for i in range(len(ans[0][v]) - 1):
        print(locs['locations'][ans[0][v][i]]['name'], end="")
        print(' ---> ', end="")
    print(locs['locations'][ans[0][v][0]]['name'])
    km = float(ans[1][v] / 1000)
    print(" |>Total route distance = ", km, "kilometers")
    print(" |>Total route duration = ", convert(ans[2][v]), "\n")

print("-----------------------------------------------------------------------------")
print("-----------------------------------------------------------------------------")
print("Comparing the running time for algorithm")

for i in range(1,11):
    if i == 1:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")
    elif i == 2:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")
    elif i == 3:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")
    elif i == 4:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")
    elif i == 5:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")
    elif i == 6:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")
    elif i == 7:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")
    elif i == 8:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")
    elif i == 9:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")
    elif i == 10:
        start1 = time.time()
        st1 = Decimal(start1)
        ans1 = tabuSearch(distance_matrix, 10000, 100, 2, numVehicles)
        end1 = time.time()
        en1 = Decimal(end1)
        TS = end1 - start1
        start = time.time()
        st = Decimal(start)
        ans = simulatedAnnealing(distance_matrix, 10000, 100, 6, numVehicles)
        end = time.time()
        en = Decimal(end)
        SA = en - st
        print("\nNumber of time the function ran: ", i)
        print("Time for Tabu Search algorithm to run = ", TS, "s")
        print("Time for Simulated Annealing algorithm to run = ", SA, "s")

i += 1
